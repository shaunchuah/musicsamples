name: Main Branch Deploy

on:
  push:
    branches: [main]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: githubactionstestingkey
      DB_ENGINE: django.db.backends.sqlite3
      DB_USER:
      DB_PASSWORD:
      DB_NAME: ":memory:"
      DB_HOST:
      DB_PORT:
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Ruff
        run: ruff format --check && ruff check
      - name: Run Tests and Coverage Report
        run: pytest --cov=.

  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      - name: Build frontend
        working-directory: frontend
        run: npm run build
      - name: Archive frontend bundle
        run: |
          tar -czf frontend.tar.gz --exclude='node_modules' -C frontend .
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend.tar.gz

  deploy:
    needs: [backend-test, frontend-build]
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host deploy
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.PROD_SSH_USER }}
          SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
      - name: Checkout specific commit on server
        run: ssh deploy 'cd ${{ secrets.INSTALLATION_DIRECTORY }} && git reset --hard HEAD && git fetch origin && git checkout ${{ github.sha }}'
      - name: Make deployment scripts executable
        run: |
          ssh deploy 'chmod +x ${{ secrets.INSTALLATION_DIRECTORY }}/scripts/github_deploy_django.sh'
          ssh deploy 'chmod +x ${{ secrets.INSTALLATION_DIRECTORY }}/scripts/github_deploy_frontend.sh'
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
      - name: Copy frontend bundle to server
        run: scp -i ~/.ssh/staging.key frontend.tar.gz deploy:~/music_frontend/releases/frontend.tar.gz
      - name: Run django deployment script
        run: ssh deploy '${{ secrets.INSTALLATION_DIRECTORY }}/scripts/github_deploy_django.sh'
      - name: Run frontend deployment script
        run: ssh deploy 'bash ${{ secrets.INSTALLATION_DIRECTORY }}/scripts/github_deploy_frontend.sh'
      - name: Install frontend dependencies and build
        run: ssh deploy 'source ~/.bashrc && cd ~/music_frontend/current && npm ci --omit=dev'
      - name: Restarting or starting PM2 process
        run: |
          ssh deploy 'source ~/.bashrc && pm2 restart music_frontend || pm2 start ecosystem.config.js'
          ssh deploy 'source ~/.bashrc && pm2 save'
      - name: Restart services
        run: |
          ssh deploy 'sudo systemctl restart gunicorn'
          ssh deploy 'sudo systemctl restart nginx'

  deploy_docs:
    needs: [backend-test, frontend-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: pip install mkdocs-material
      - run: mkdocs gh-deploy --force
